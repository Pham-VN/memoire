{"ast":null,"code":"var _jsxFileName = \"/home/clement/Desktop/Todo-App/src/components/TodoInput.js\",\n  _s = $RefreshSig$();\nimport Input from \"./FORM/Input.js\";\nimport Button from \"./FORM/Button.js\";\nimport { useState } from \"react\";\nimport Todo from './Todo.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoInput = () => {\n  _s();\n  const [todo, setTodo] = useState('');\n  const [list, setList] = useState([]);\n  const handleUpdateTodo = event => {\n    const newTodo = event.target.value;\n    setTodo(newTodo);\n  };\n  const handleAddTodo = todo => {\n    const newTask = {\n      id: Math.random,\n      // create id of task\n      todo: todo // new task entered by user\n    };\n\n    setList([...list, newTask]); // update the list state by using the spread operator [...list] => create a new array which the existing task in the lisk. Append the newTask to the end of the array.\n    setTodo(''); // reset the todo and clearing the input field when the user clicks the button\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add To do List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"Add item\",\n      value: todo,\n      onChange: handleUpdateTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"button\",\n      onClick: handleAddTodo(todo),\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: list.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"task\",\n        children: todo.todo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 8\n  }, this);\n};\n_s(TodoInput, \"2Vut8gNfizZaapZyRsZcXl+tIes=\");\n_c = TodoInput;\nexport default TodoInput;\nvar _c;\n$RefreshReg$(_c, \"TodoInput\");","map":{"version":3,"names":["Input","Button","useState","Todo","jsxDEV","_jsxDEV","TodoInput","_s","todo","setTodo","list","setList","handleUpdateTodo","event","newTodo","target","value","handleAddTodo","newTask","id","Math","random","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","map","_c","$RefreshReg$"],"sources":["/home/clement/Desktop/Todo-App/src/components/TodoInput.js"],"sourcesContent":["import Input from \"./FORM/Input.js\"\nimport Button from \"./FORM/Button.js\"\nimport { useState } from \"react\"\nimport Todo from './Todo.js';\n\nconst TodoInput = () => {\n\n    const [todo, setTodo] = useState('');\n    const [list,setList] = useState([]);\n\n\n    const handleUpdateTodo = (event) => {\n       const newTodo = event.target.value;\n       setTodo(newTodo);\n    }\n\n    const handleAddTodo = (todo) => {\n        \n        const newTask = {\n            id: Math.random, // create id of task\n            todo: todo // new task entered by user\n        }\n\n        setList([...list,newTask]) // update the list state by using the spread operator [...list] => create a new array which the existing task in the lisk. Append the newTask to the end of the array.\n        setTodo('') // reset the todo and clearing the input field when the user clicks the button\n    }\n\n    return (\n       <div className=\"container\">\n        <h2>Add To do List</h2>\n        <Input \n        type=\"text\"\n        placeholder = \"Add item\"\n        value = {todo}\n        onChange = {handleUpdateTodo}\n        ></Input>\n\n        <Button className=\"button\" onClick={handleAddTodo(todo)}>\n            Add\n        </Button>\n\n        <ul>\n            {list.map((todo) => (\n                <li className=\"task\">{todo.todo}</li>\n            ))}\n        </ul>\n       </div>\n    )\n}\nexport default TodoInput;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,iBAAiB;AACnC,OAAOC,MAAM,MAAM,kBAAkB;AACrC,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACQ,IAAI,EAACC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAGnC,MAAMU,gBAAgB,GAAIC,KAAK,IAAK;IACjC,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK;IAClCP,OAAO,CAACK,OAAO,CAAC;EACnB,CAAC;EAED,MAAMG,aAAa,GAAIT,IAAI,IAAK;IAE5B,MAAMU,OAAO,GAAG;MACZC,EAAE,EAAEC,IAAI,CAACC,MAAM;MAAE;MACjBb,IAAI,EAAEA,IAAI,CAAC;IACf,CAAC;;IAEDG,OAAO,CAAC,CAAC,GAAGD,IAAI,EAACQ,OAAO,CAAC,CAAC,EAAC;IAC3BT,OAAO,CAAC,EAAE,CAAC,EAAC;EAChB,CAAC;;EAED,oBACGJ,OAAA;IAAKiB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACzBlB,OAAA;MAAAkB,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBtB,OAAA,CAACL,KAAK;MACN4B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAG,UAAU;MACxBb,KAAK,EAAIR,IAAK;MACdsB,QAAQ,EAAIlB;IAAiB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CAAC,eAETtB,OAAA,CAACJ,MAAM;MAACqB,SAAS,EAAC,QAAQ;MAACS,OAAO,EAAEd,aAAa,CAACT,IAAI,CAAE;MAAAe,QAAA,EAAC;IAEzD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAETtB,OAAA;MAAAkB,QAAA,EACKb,IAAI,CAACsB,GAAG,CAAExB,IAAI,iBACXH,OAAA;QAAIiB,SAAS,EAAC,MAAM;QAAAC,QAAA,EAAEf,IAAI,CAACA;MAAI;QAAAgB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CACvC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEb,CAAC;AAAApB,EAAA,CA3CKD,SAAS;AAAA2B,EAAA,GAAT3B,SAAS;AA4Cf,eAAeA,SAAS;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}