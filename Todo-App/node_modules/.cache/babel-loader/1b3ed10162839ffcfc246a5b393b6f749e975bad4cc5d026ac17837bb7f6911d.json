{"ast":null,"code":"var _jsxFileName = \"/home/clement/Desktop/Todo-App/src/components/TodoInput.js\",\n  _s = $RefreshSig$();\nimport Input from \"./FORM/Input.js\";\nimport Button from \"./FORM/Button.js\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoInput = () => {\n  _s();\n  const [inputTask, setInputTask] = useState('');\n  const [list, setList] = useState([]);\n  const handleUpdateTodo = event => {\n    setInputTask(event.target.value);\n  };\n  const handleAddTodo = () => {\n    const newTask = {\n      id: Math.random,\n      // create id of task\n      setInputTask: inputTask // new task entered by user\n    };\n\n    setList([...list, newTask]); // update the list state by using the spread operator [...list] => create a new array which the existing task in the lisk. Append the newTask to the end of the array.\n    // setInputTask('') // reset the todo and clearing the input field when the user clicks the button\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add To do List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      type: \"text\",\n      placeholder: \"Add item\",\n      value: inputTask,\n      onChange: handleUpdateTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: \"button\",\n      onClick: handleAddTodo,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: list.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"task\",\n        children: todo.todo\n      }, todo.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 8\n  }, this);\n};\n_s(TodoInput, \"4dbKlgSuLPNNMuQrBWrTrHTxmcs=\");\n_c = TodoInput;\nexport default TodoInput;\nvar _c;\n$RefreshReg$(_c, \"TodoInput\");","map":{"version":3,"names":["Input","Button","useState","jsxDEV","_jsxDEV","TodoInput","_s","inputTask","setInputTask","list","setList","handleUpdateTodo","event","target","value","handleAddTodo","newTask","id","Math","random","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","map","todo","_c","$RefreshReg$"],"sources":["/home/clement/Desktop/Todo-App/src/components/TodoInput.js"],"sourcesContent":["import Input from \"./FORM/Input.js\"\nimport Button from \"./FORM/Button.js\"\nimport { useState } from \"react\"\n\nconst TodoInput = () => {\n\n    const [inputTask, setInputTask] = useState('');\n    const [list,setList] = useState([]);\n\n\n    const handleUpdateTodo = (event) => {\n       setInputTask(event.target.value);\n    }\n\n    const handleAddTodo = () => {\n        \n        const newTask = {\n            id: Math.random, // create id of task\n            setInputTask: inputTask // new task entered by user\n        }\n\n        setList([...list,newTask]) // update the list state by using the spread operator [...list] => create a new array which the existing task in the lisk. Append the newTask to the end of the array.\n        // setInputTask('') // reset the todo and clearing the input field when the user clicks the button\n    }\n\n    return (\n       <div className=\"container\">\n        <h2>Add To do List</h2>\n        <Input \n        type=\"text\"\n        placeholder = \"Add item\"\n        value = {inputTask}\n        onChange = {handleUpdateTodo}\n        ></Input>\n\n        <Button className=\"button\" onClick={handleAddTodo}>\n            Add\n        </Button>\n\n        <ul>\n            {list.map((todo) => (\n                <li className=\"task\" key={todo.id}>{todo.todo}</li>\n            ))}\n        </ul>\n       </div>\n    )\n}\nexport default TodoInput;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,iBAAiB;AACnC,OAAOC,MAAM,MAAM,kBAAkB;AACrC,SAASC,QAAQ,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEpB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACO,IAAI,EAACC,OAAO,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAGnC,MAAMS,gBAAgB,GAAIC,KAAK,IAAK;IACjCJ,YAAY,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC,CAAC;EAED,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAExB,MAAMC,OAAO,GAAG;MACZC,EAAE,EAAEC,IAAI,CAACC,MAAM;MAAE;MACjBX,YAAY,EAAED,SAAS,CAAC;IAC5B,CAAC;;IAEDG,OAAO,CAAC,CAAC,GAAGD,IAAI,EAACO,OAAO,CAAC,CAAC,EAAC;IAC3B;EACJ,CAAC;;EAED,oBACGZ,OAAA;IAAKgB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACzBjB,OAAA;MAAAiB,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBrB,OAAA,CAACJ,KAAK;MACN0B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAG,UAAU;MACxBb,KAAK,EAAIP,SAAU;MACnBqB,QAAQ,EAAIjB;IAAiB;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CAAC,eAETrB,OAAA,CAACH,MAAM;MAACmB,SAAS,EAAC,QAAQ;MAACS,OAAO,EAAEd,aAAc;MAAAM,QAAA,EAAC;IAEnD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAETrB,OAAA;MAAAiB,QAAA,EACKZ,IAAI,CAACqB,GAAG,CAAEC,IAAI,iBACX3B,OAAA;QAAIgB,SAAS,EAAC,MAAM;QAAAC,QAAA,EAAgBU,IAAI,CAACA;MAAI,GAAnBA,IAAI,CAACd,EAAE;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CACrD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEb,CAAC;AAAAnB,EAAA,CA1CKD,SAAS;AAAA2B,EAAA,GAAT3B,SAAS;AA2Cf,eAAeA,SAAS;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}