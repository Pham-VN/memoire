{"ast":null,"code":"var _jsxFileName = \"/home/clement/Desktop/REACTJS/exercice_composant/exercice-component/todoApp/todo-app/src/components/TodoInput.js\",\n  _s = $RefreshSig$();\nimport Input from \"./FORM/Input.js\";\nimport Button from \"./FORM/Button.js\";\nimport { useState } from \"react\";\n\n// export default function Todoinput() {\n\n//     const [inputTask, setInputTask] = useState(\"\")\n\n//     // Step 1: trigger an event when we type a task into the input box\n//     const handleInputChange = (event) => {\n//         setInputTask(event.target.value) // access the value of revent's target\n//     }\n\n//     // Step 2: \n//     const [list, setList] = useState([]);\n\n//     const handleAddToDo = () => {\n\n//         setList([...list,inputTask]) // spread operator [...list] to create a new array with the existing taks in the list. Append the new Task to the end of the array\n//          setInputTask(\"\") // clear the input field when the user clisks the button\n//     }\n\n//     return (\n//         <div className=\"appToDo\">\n//         <h1>Add list to do you will do in the day</h1>\n//         <form className=\"input-section\">\n//             <Input\n//             id=\"todoInput\"\n//             type=\"text\"\n//             placeholder = \"Add item...\"\n//             value={inputTask}\n//             onChange={handleInputChange}\n//             />\n\n//             <Button \n//             id=\"addBtn\"\n//             // type=\"submit\"\n//             className=\"add\"\n//             onClick = {handleAddToDo}\n//             >Add</Button>\n//         </form>\n//         <ul>\n//             {list.map((todo) => {\n//                 <li className=\"task\" key={todo.id}>\n//                     \"test\"\n//                 </li>\n//             })}\n//         </ul>\n//         </div>\n//     )\n// }\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoList = () => {\n  _s();\n  const [inputTask, setInputTask] = useState('');\n  const [list, setList] = useState([]);\n  const handleAddTodo = () => {\n    const newTask = {\n      id: Math.random(),\n      todo: inputTask\n    };\n    setList([...list, newTask]);\n    setInputTask('');\n  };\n  const handleDeleteTodo = id => {\n    const newList = list.filter(todo => todo.id !== id);\n    setList(newList);\n  };\n  const handleInputChange = event => {\n    setInputTask(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Todo\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My To-Do List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Top\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input\",\n        type: \"text\",\n        value: inputTask,\n        onChange: handleInputChange,\n        placeholder: \"Enter a task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: handleAddTodo,\n        children: \"ADD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: list.map(todo => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"task\",\n        children: [todo.todo, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDeleteTodo(todo.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this)]\n      }, todo.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 12\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(TodoList, \"b8aXW7qYMtCrsPmldtnKmT94L80=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["Input","Button","useState","jsxDEV","_jsxDEV","TodoList","_s","inputTask","setInputTask","list","setList","handleAddTodo","newTask","id","Math","random","todo","handleDeleteTodo","newList","filter","handleInputChange","event","target","value","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","placeholder","onClick","map","_c","$RefreshReg$"],"sources":["/home/clement/Desktop/REACTJS/exercice_composant/exercice-component/todoApp/todo-app/src/components/TodoInput.js"],"sourcesContent":["import Input from \"./FORM/Input.js\"\nimport Button from \"./FORM/Button.js\"\nimport { useState } from \"react\"\n\n\n// export default function Todoinput() {\n\n//     const [inputTask, setInputTask] = useState(\"\")\n\n//     // Step 1: trigger an event when we type a task into the input box\n//     const handleInputChange = (event) => {\n//         setInputTask(event.target.value) // access the value of revent's target\n//     }\n\n//     // Step 2: \n//     const [list, setList] = useState([]);\n    \n//     const handleAddToDo = () => {\n\n//         setList([...list,inputTask]) // spread operator [...list] to create a new array with the existing taks in the list. Append the new Task to the end of the array\n//          setInputTask(\"\") // clear the input field when the user clisks the button\n//     }\n\n//     return (\n//         <div className=\"appToDo\">\n//         <h1>Add list to do you will do in the day</h1>\n//         <form className=\"input-section\">\n//             <Input\n//             id=\"todoInput\"\n//             type=\"text\"\n//             placeholder = \"Add item...\"\n//             value={inputTask}\n//             onChange={handleInputChange}\n//             />\n\n//             <Button \n//             id=\"addBtn\"\n//             // type=\"submit\"\n//             className=\"add\"\n//             onClick = {handleAddToDo}\n//             >Add</Button>\n//         </form>\n//         <ul>\n//             {list.map((todo) => {\n//                 <li className=\"task\" key={todo.id}>\n//                     \"test\"\n//                 </li>\n//             })}\n//         </ul>\n//         </div>\n//     )\n// }\n\n\nconst TodoList = () => {\n    const [inputTask, setInputTask] = useState('');\n    const [list, setList] = useState([]);\n\n    const handleAddTodo = () => {\n        const newTask = {\n            id: Math.random(),\n            todo: inputTask\n        };\n\n       setList([...list, newTask]);\n        setInputTask('');\n    };\n\n   const handleDeleteTodo = (id) => {\n        const newList = list.filter((todo) => todo.id !== id);\n        setList(newList);\n    };\n\n   const handleInputChange = (event) => {\n        setInputTask(event.target.value);\n    };\n\n   return (\n        <div className=\"Todo\">\n            <h1>My To-Do List</h1>\n\n            <div className=\"Top\">\n                <input className=\"input\" type=\"text\" value={inputTask}\n                   onChange={handleInputChange} placeholder=\"Enter a task\" />\n\n                <button className=\"btn\" onClick={handleAddTodo}>ADD</button>\n            </div>\n\n           <ul>\n                { list.map((todo) => (\n                    <li className=\"task\" key={todo.id}>\n                        {todo.todo}\n                        <button onClick={() => handleDeleteTodo(todo.id)}>\n                           Delete\n                       </button>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default TodoList; "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}