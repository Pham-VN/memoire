{"ast":null,"code":"var _jsxFileName = \"/home/clement/Desktop/REACTJS/exercice_composant/exercice-component/todoApp/todo-app/src/components/TodoInput.js\",\n  _s = $RefreshSig$();\nimport Input from \"./FORM/Input.js\";\nimport Button from \"./FORM/Button.js\";\nimport { useState } from \"react\";\nimport Todo from './Todo.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Todoinput() {\n  _s();\n  const [inputTask, setInputTask] = useState(\"\");\n\n  // Step 2: \n  const [list, setList] = useState([]);\n  const handleAddToDo = () => {\n    const newTask = {\n      id: Math.random(),\n      todo: inputTask\n    };\n    setList([...list, newTask]); // spread operator [...list] to create a new array with the existing taks in the list. Append the new Task to the end of the array\n    setInputTask(''); // clear the input field when the user clisks the button\n  };\n\n  // Step 1: trigger an event when we type a task into the input box\n  const handleInputChange = event => {\n    setInputTask(event.target.value); // access the value of revent's target\n  };\n\n  // const handleDeleteTodo = (id) => {\n  //     const newList = list.filter((todo) => todo.id !== id)\n  //     setList(newList);\n  // }\n\n  const deleteTodo = idTodoDelete => {\n    setList(currentTodos => currentTodos.filter(todo => todo.id !== idTodoDelete));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"appToDo\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"My To-Do List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-section\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        id: \"todoInput\",\n        type: \"text\",\n        placeholder: \"Add item...\",\n        value: inputTask,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        id: \"addBtn\"\n        // type=\"submit\"\n        ,\n        className: \"add\",\n        onClick: handleAddToDo,\n        children: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: list.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Todo, {\n          item: todo.todo\n        }, todo.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n}\n_s(Todoinput, \"cqxGvAuLkxOyZcqmOnEU1HRPRPo=\");\n_c = Todoinput;\nvar _c;\n$RefreshReg$(_c, \"Todoinput\");","map":{"version":3,"names":["Input","Button","useState","Todo","jsxDEV","_jsxDEV","Todoinput","_s","inputTask","setInputTask","list","setList","handleAddToDo","newTask","id","Math","random","todo","handleInputChange","event","target","value","deleteTodo","idTodoDelete","currentTodos","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","map","item","_c","$RefreshReg$"],"sources":["/home/clement/Desktop/REACTJS/exercice_composant/exercice-component/todoApp/todo-app/src/components/TodoInput.js"],"sourcesContent":["import Input from \"./FORM/Input.js\"\nimport Button from \"./FORM/Button.js\"\nimport { useState } from \"react\"\nimport Todo from './Todo.js'\n\n\nexport default function Todoinput() {\n\n    const [inputTask, setInputTask] = useState(\"\");\n\n   \n    // Step 2: \n    const [list, setList] = useState([]);\n    \n    const handleAddToDo = () => {\n        const newTask = {\n            id: Math.random(),\n            todo: inputTask\n        };\n\n        setList([...list,newTask]) // spread operator [...list] to create a new array with the existing taks in the list. Append the new Task to the end of the array\n        setInputTask('') // clear the input field when the user clisks the button\n    }\n\n     // Step 1: trigger an event when we type a task into the input box\n     const handleInputChange = (event) => {\n        setInputTask(event.target.value) // access the value of revent's target\n    }\n\n    // const handleDeleteTodo = (id) => {\n    //     const newList = list.filter((todo) => todo.id !== id)\n    //     setList(newList);\n    // }\n\n    const deleteTodo = (idTodoDelete) => {\n        setList((currentTodos)=> currentTodos.filter((todo) => todo.id !== idTodoDelete ))\n    }\n \n    return (\n        <div className=\"appToDo\">\n        <h1>My To-Do List</h1>\n        <div className=\"input-section\">\n            <Input\n            id=\"todoInput\"\n            type=\"text\"\n            placeholder = \"Add item...\"\n            value={inputTask}\n            onChange={handleInputChange}\n            />\n\n            <Button \n            id=\"addBtn\"\n            // type=\"submit\"\n            className=\"add\"\n            onClick = {handleAddToDo}\n            >Add</Button>\n        </div>\n        <ul>\n    \n            {list.map((todo) => (\n            <div>\n                <Todo \n                key={todo.id}\n                item = {todo.todo}\n                ></Todo>\n            </div>\n            ))}\n        </ul>\n        </div>\n    )\n}\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,iBAAiB;AACnC,OAAOC,MAAM,MAAM,kBAAkB;AACrC,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,WAAW;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAG5B,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAEhC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;;EAG9C;EACA,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpC,MAAMU,aAAa,GAAGA,CAAA,KAAM;IACxB,MAAMC,OAAO,GAAG;MACZC,EAAE,EAAEC,IAAI,CAACC,MAAM,CAAC,CAAC;MACjBC,IAAI,EAAET;IACV,CAAC;IAEDG,OAAO,CAAC,CAAC,GAAGD,IAAI,EAACG,OAAO,CAAC,CAAC,EAAC;IAC3BJ,YAAY,CAAC,EAAE,CAAC,EAAC;EACrB,CAAC;;EAEA;EACA,MAAMS,iBAAiB,GAAIC,KAAK,IAAK;IAClCV,YAAY,CAACU,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,EAAC;EACrC,CAAC;;EAED;EACA;EACA;EACA;;EAEA,MAAMC,UAAU,GAAIC,YAAY,IAAK;IACjCZ,OAAO,CAAEa,YAAY,IAAIA,YAAY,CAACC,MAAM,CAAER,IAAI,IAAKA,IAAI,CAACH,EAAE,KAAKS,YAAa,CAAC,CAAC;EACtF,CAAC;EAED,oBACIlB,OAAA;IAAKqB,SAAS,EAAC,SAAS;IAAAC,QAAA,gBACxBtB,OAAA;MAAAsB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtB1B,OAAA;MAAKqB,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC1BtB,OAAA,CAACL,KAAK;QACNc,EAAE,EAAC,WAAW;QACdkB,IAAI,EAAC,MAAM;QACXC,WAAW,EAAG,aAAa;QAC3BZ,KAAK,EAAEb,SAAU;QACjB0B,QAAQ,EAAEhB;MAAkB;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3B,CAAC,eAEF1B,OAAA,CAACJ,MAAM;QACPa,EAAE,EAAC;QACH;QAAA;QACAY,SAAS,EAAC,KAAK;QACfS,OAAO,EAAIvB,aAAc;QAAAe,QAAA,EACxB;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC,eACN1B,OAAA;MAAAsB,QAAA,EAEKjB,IAAI,CAAC0B,GAAG,CAAEnB,IAAI,iBACfZ,OAAA;QAAAsB,QAAA,eACItB,OAAA,CAACF,IAAI;UAELkC,IAAI,EAAIpB,IAAI,CAACA;QAAK,GADbA,IAAI,CAACH,EAAE;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACxB,EAAA,CAhEuBD,SAAS;AAAAgC,EAAA,GAAThC,SAAS;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}